// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using HomeService.Models;

#nullable disable

namespace HomeService.Data
{
    public partial class HomeServiceContext : DbContext
    {
        public HomeServiceContext()
        {
        }

        public HomeServiceContext(DbContextOptions<HomeServiceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractService> ContractService { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Nationality> Nationality { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<Receipt> Receipt { get; set; }
        public virtual DbSet<ReceiptService> ReceiptService { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<RequestLog> RequestLog { get; set; }
        public virtual DbSet<RequestState> RequestState { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategory { get; set; }
        public virtual DbSet<Technician> Technician { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UnitGroup> UnitGroup { get; set; }
        public virtual DbSet<Configuration> Configuration { get; set; }
        public virtual DbSet<FAQ> FAQ { get; set; }
        public virtual DbSet<PageContent> PageContent { get; set; }
        public virtual DbSet<ContactUs> ContactUs { get; set; }
        public virtual DbSet<Newsletter> Newsletter { get; set; }
        public virtual DbSet<SparePart> SparePart { get; set; }
        public virtual DbSet<RequestSpareParts> RequestSpareParts { get; set; }
        public virtual DbSet<ContractType> ContractType { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Area>(entity =>
            {
                entity.Property(e => e.AreaTlAr).HasMaxLength(50);

                entity.Property(e => e.AreaTlEn).HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Area)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Area_City");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.CityTlAr).HasMaxLength(50);

                entity.Property(e => e.CityTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_Customer");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_Unit");
            });

            modelBuilder.Entity<ContractService>(entity =>
            {
                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractService)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractService_Contract");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ContractService)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractService_Service");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.Avenue).HasMaxLength(50);

                entity.Property(e => e.Block).HasMaxLength(50);

                entity.Property(e => e.BuildingNo).HasMaxLength(50);

                entity.Property(e => e.CivilId).HasMaxLength(50);

                entity.Property(e => e.Flat).HasMaxLength(50);

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.FullNameAr).HasMaxLength(50);

                entity.Property(e => e.FullNameEn).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PassportNo).HasMaxLength(50);

                entity.Property(e => e.Pic).HasMaxLength(100);

                entity.Property(e => e.Street).HasMaxLength(50);

                entity.Property(e => e.Tele1).HasMaxLength(50);

                entity.Property(e => e.Tele2).HasMaxLength(50);
                entity.Property(e => e.Email).HasMaxLength(50);


                entity.HasOne(d => d.Area)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_Customer_Area");

                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_Customer_Nationality");
            });

            modelBuilder.Entity<Nationality>(entity =>
            {
                entity.Property(e => e.NationalityTlAr).HasMaxLength(50);

                entity.Property(e => e.NationalityTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.Property(e => e.PaymentMethodTlAr).HasMaxLength(50);

                entity.Property(e => e.PaymentMethodTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<Receipt>(entity =>
            {
                entity.Property(e => e.Amount).HasMaxLength(50);

               

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Receipt)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Receipt_Contract");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Receipt)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .HasConstraintName("FK_Receipt_PaymentMethod");

                entity.HasOne(d => d.ReceiptService)
                    .WithMany(p => p.Receipt)
                    .HasForeignKey(d => d.ReceiptServiceId)
                    .HasConstraintName("FK_Receipt_ReceiptService");
            });

            modelBuilder.Entity<ReceiptService>(entity =>
            {
                entity.Property(e => e.ReceiptServiceTlAr).HasMaxLength(50);

                entity.Property(e => e.ReceiptServiceTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<Request>(entity =>
            {
                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Request)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_Customer");

                entity.HasOne(d => d.RequestState)
                    .WithMany(p => p.Request)
                    .HasForeignKey(d => d.RequestStateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_RequestState");
            });

            modelBuilder.Entity<RequestLog>(entity =>
            {
                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestLog)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestLog_Request");
            });

            modelBuilder.Entity<RequestState>(entity =>
            {
                entity.Property(e => e.RequestStateAr).HasMaxLength(50);

                entity.Property(e => e.RequestStateEn).HasMaxLength(50);
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.ServiceTlAr).HasMaxLength(50);

                entity.Property(e => e.ServiceTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<ServiceCategory>(entity =>
            {
                entity.Property(e => e.ServiceCategoryTlAr).HasMaxLength(50);

                entity.Property(e => e.ServiceCategoryTlEn).HasMaxLength(50);
            });

            modelBuilder.Entity<Technician>(entity =>
            {
                entity.Property(e => e.CivilId).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullAddress).HasMaxLength(500);

                entity.Property(e => e.FullNameAr).HasMaxLength(50);

                entity.Property(e => e.FullNameEn).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.PassportNo).HasMaxLength(50);

                entity.Property(e => e.Pic).HasMaxLength(100);

                entity.Property(e => e.Tele).HasMaxLength(50);
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.Property(e => e.Avenue).HasMaxLength(50);

                entity.Property(e => e.Block).HasMaxLength(50);

                entity.Property(e => e.BuildingNo).HasMaxLength(50);

                entity.Property(e => e.Flat).HasMaxLength(50);

                entity.Property(e => e.Floor).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(50);

                entity.Property(e => e.Street).HasMaxLength(50);

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.Unit)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_Unit_Area");

                entity.HasOne(d => d.UnitGroup)
                    .WithMany(p => p.Unit)
                    .HasForeignKey(d => d.UnitGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Unit_UnitGroup");
            });

            modelBuilder.Entity<UnitGroup>(entity =>
            {
                entity.Property(e => e.UnitGroupTlAr)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.UnitGroupTlEn)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}